(function(root, factory) {
    if(typeof exports === 'object') {
        module.exports = factory(require('izzy'), require('umodel'));
    }
    else if(typeof define === 'function' && define.amd) {
        define('Bo', ['izzy', 'umodel'], factory);
    }
    else {
        root['Bo'] = factory(root.izzy, root.umodel);
    }
}(this, function(izzy, umodel) {
// Generated by CoffeeScript 1.7.1
var _,
  __slice = [].slice;

_ = {
  each: function(collection, fn) {
    var key, value, _i, _len, _results, _results1;
    if (izzy.array(collection)) {
      _results = [];
      for (key = _i = 0, _len = collection.length; _i < _len; key = ++_i) {
        value = collection[key];
        _results.push(fn(value, key));
      }
      return _results;
    } else if (izzy.object(collection)) {
      _results1 = [];
      for (key in collection) {
        value = collection[key];
        _results1.push(fn(value, key));
      }
      return _results1;
    }
  },
  extend: function() {
    var key, obj, other, others, _i, _len;
    obj = arguments[0], others = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if (obj && others) {
      for (_i = 0, _len = others.length; _i < _len; _i++) {
        other = others[_i];
        for (key in other) {
          obj[key] = other[key];
        }
      }
    }
    return obj;
  },
  fluent: function(fn) {
    return function() {
      fn.apply(this, arguments);
      return this;
    };
  },
  one: function(collection) {
    var id;
    for (id in collection) {
      return id;
    }
  }
};

// Generated by CoffeeScript 1.7.1
var View,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __slice = [].slice;

View = (function() {
  View.prototype.events = {};

  View.prototype.model = new umodel;

  View.prototype.initialize = function() {};

  function View() {
    var args, element;
    element = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    this.on = __bind(this.on, this);
    this.element = element || document;
    if (izzy.object(this.events)) {
      _.each(this.events, this.on);
    }
    if (izzy["function"](this.initialize)) {
      this.initialize.apply(this, args);
    }
  }

  View.prototype.on = function(fn, type) {
    var t, types, _i, _len, _results;
    types = type.split(' ');
    _results = [];
    for (_i = 0, _len = types.length; _i < _len; _i++) {
      t = types[_i];
      _results.push(this.element.addEventListener(t, this[fn]));
    }
    return _results;
  };

  return View;

})();

// Generated by CoffeeScript 1.7.1
var Pane,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Pane = (function() {
  Pane.prototype.id = null;

  Pane.prototype.element = null;

  function Pane(options) {
    var element, html, idAttr;
    this.options = options;
    this.clearAnimation = __bind(this.clearAnimation, this);
    ++this.factory.counter;
    element = this.options.element;
    html = this.options.html;
    idAttr = element ? element.getAttribute(this.options.paneAttribute) : void 0;
    this.id = this.options.id || idAttr || this.factory.id();
    this.element = element || this.factory.create();
    this.index = this.options.index || this.factory.counter;
    this.element.setAttribute(this.options.paneAttribute, this.id);
    if (html) {
      this.element.innerHTML = html;
    }
  }

  Pane.prototype.factory = {
    counter: 0,
    create: function() {
      var element;
      element = document.createElement('div');
      element.setAttribute('data-bo-pane', this.id());
      document.body.appendChild(element);
      return element;
    },
    id: function() {
      return "pane-" + this.counter;
    }
  };

  Pane.prototype.clearAnimation = function() {
    return this.element.classList.remove('animate');
  };

  Pane.prototype.animate = function(instant) {
    if (!instant) {
      this.element.classList.add('animate');
      return setTimeout(this.clearAnimation, this.options.animationDuration);
    }
  };

  Pane.prototype.left = _.fluent(function(instant) {
    this.animate(instant);
    this.element.classList.remove('right');
    return this.element.classList.add('left');
  });

  Pane.prototype.right = _.fluent(function(instant) {
    this.animate(instant);
    this.element.classList.remove('left');
    return this.element.classList.add('right');
  });

  Pane.prototype.show = _.fluent(function(instant) {
    this.animate(instant);
    this.element.classList.remove('left');
    return this.element.classList.remove('right');
  });

  return Pane;

})();

// Generated by CoffeeScript 1.7.1
var Bo,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Bo = (function(_super) {
  __extends(Bo, _super);

  function Bo() {
    this.click = __bind(this.click, this);
    this.register = __bind(this.register, this);
    return Bo.__super__.constructor.apply(this, arguments);
  }

  Bo.prototype.options = {
    animationDuration: 200,
    paneAttribute: 'bo-pane',
    paneTriggerAttribute: 'bo-trigger',
    change: function() {}
  };

  Bo.prototype.events = {
    'touchstart click': 'click'
  };

  Bo.prototype.panes = {};

  Bo.prototype.initialize = function(options) {
    var first, panes;
    _.extend(this.options, options);
    this.model.on('set:active', (function(_this) {
      return function(key, pane) {
        if (pane) {
          return _this.options.change.call(_this, pane);
        }
      };
    })(this));
    this.model.set('active', null);
    panes = document.querySelectorAll("[" + this.options.paneAttribute + "]");
    _.each(panes, this.register);
    this.hideAll();
    this.displayBlock();
    first = _.one(this.panes);
    if (first) {
      return this.show(first);
    }
  };

  Bo.prototype.displayBlock = function() {
    return this.iterate(function(pane) {
      return pane.element.style.display = 'block';
    });
  };

  Bo.prototype.register = function(element) {
    var opts, pane;
    if (typeof element === 'String' || typeof element === 'Number') {
      opts = {
        id: element
      };
    } else {
      opts = {
        element: element
      };
    }
    opts = _.extend(opts, this.options);
    pane = new Pane(opts);
    return this.panes[pane.id] = pane;
  };

  Bo.prototype.iterate = function(fn) {
    return _.each(this.panes, fn);
  };

  Bo.prototype.hideAll = function() {
    return this.iterate(function(pane) {
      return pane.right(true);
    });
  };

  Bo.prototype.restToLeft = function(index) {
    return this.iterate(function(pane) {
      if (pane.index < index) {
        return pane.left(true);
      }
    });
  };

  Bo.prototype.restToRight = function(index) {
    return this.iterate(function(pane) {
      if (pane.index > index) {
        return pane.right(true);
      }
    });
  };

  Bo.prototype.show = function(id) {
    var index, newPane, oldPane;
    newPane = this.panes[id];
    oldPane = this.model.get('active');
    if (!newPane) {
      throw new Error('Pane with ID "' + id + '" does not exist in the DOM, or is not registered with Bo.');
    }
    if (oldPane) {
      index = newPane.index;
      if (index > oldPane.index) {
        oldPane.left();
        (newPane.right(true)).show();
        this.restToLeft(index);
      } else {
        oldPane.right();
        (newPane.left(true)).show();
        this.restToRight(index);
      }
    } else {
      newPane.show(true);
    }
    return this.model.set('active', newPane);
  };

  Bo.prototype.click = function(event) {
    var id;
    id = event.target.getAttribute(this.options.paneTriggerAttribute);
    if (id) {
      event.preventDefault();
      return this.show(id);
    }
  };

  return Bo;

})(View);

    return Bo;
}));
